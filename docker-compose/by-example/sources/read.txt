
docker build -t myapp .  ==> build mon image depuis le dockerfile

 Dans la description de l'image mysql, il existe une autre information très utile. 
 Lorsqu'un conteneur mysql est démarré, il exécutera des fichiers avec des extensions .sh, .sql et .sql.gz qui se trouvent dans /docker-entrypoint-initdb.d. 
 Nous allons profiter de cette information pour déposer le fichier articles.sql (disponible dans les sources téléchargées) dans le dossier /docker-entrypoint-initdb.d afin de créer automatiquement notre table SQL. 



--explication docker-compose

Les services ne sont en réalité que des conteneurs. 

Le restart: always démarrera automatiquement le conteneur en cas de redémarrage du serveur 

- db-volume:/var/lib/mysql ==> stocker les données de la BD

- ./articles.sql:/docker-entrypoint-initdb.d/articles.sql ==> volume pour exécuter automatiquement notre fichier sql


Les services démarrent en ordre de dépendance. Dans notre cas, le service db est démarré avant le service app

Les services s'arrêtent selon l'ordre de dépendance. Dans notre cas, le service app est arrêté avant le service db

db-volume : c'est le volume pour stocker les données de notre base de données. 



docker-compose up -d : 'xécuter les conteneur du Docker compose en arrière-plan. 

docker-compose kill : tuer les containers, avec docker-compose up on les redemarre

Pour faire communiquer notre application web avec la base de données, on peux utiliser dans le conteneur de l'app web soit l'ip, le nom du service (ici db) ou le nom du conteneur (ici mysql_c) de la base de données. 




